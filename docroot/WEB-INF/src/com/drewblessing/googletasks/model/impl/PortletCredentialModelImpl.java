/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.drewblessing.googletasks.model.impl;

import com.drewblessing.googletasks.model.PortletCredential;
import com.drewblessing.googletasks.model.PortletCredentialModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PortletCredential service. Represents a row in the &quot;GT_PortletCredential&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.drewblessing.googletasks.model.PortletCredentialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortletCredentialImpl}.
 * </p>
 *
 * @author Drew A. Blessing
 * @see PortletCredentialImpl
 * @see com.drewblessing.googletasks.model.PortletCredential
 * @see com.drewblessing.googletasks.model.PortletCredentialModel
 * @generated
 */
public class PortletCredentialModelImpl extends BaseModelImpl<PortletCredential>
	implements PortletCredentialModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portlet credential model instance should use the {@link com.drewblessing.googletasks.model.PortletCredential} interface instead.
	 */
	public static final String TABLE_NAME = "GT_PortletCredential";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "googleId", Types.VARCHAR },
			{ "userEmail", Types.VARCHAR },
			{ "userPicture", Types.VARCHAR },
			{ "accessToken", Types.VARCHAR },
			{ "refreshToken", Types.VARCHAR },
			{ "expires", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table GT_PortletCredential (id_ LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,googleId VARCHAR(75) null,userEmail VARCHAR(75) null,userPicture VARCHAR(200) null,accessToken VARCHAR(75) null,refreshToken VARCHAR(75) null,expires LONG)";
	public static final String TABLE_SQL_DROP = "drop table GT_PortletCredential";
	public static final String ORDER_BY_JPQL = " ORDER BY portletCredential.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GT_PortletCredential.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.drewblessing.googletasks.model.PortletCredential"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.drewblessing.googletasks.model.PortletCredential"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.drewblessing.googletasks.model.PortletCredential"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GOOGLEID_COLUMN_BITMASK = 2L;
	public static long USEREMAIL_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.drewblessing.googletasks.model.PortletCredential"));

	public PortletCredentialModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PortletCredential.class;
	}

	public String getModelClassName() {
		return PortletCredential.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("googleId", getGoogleId());
		attributes.put("userEmail", getUserEmail());
		attributes.put("userPicture", getUserPicture());
		attributes.put("accessToken", getAccessToken());
		attributes.put("refreshToken", getRefreshToken());
		attributes.put("expires", getExpires());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String googleId = (String)attributes.get("googleId");

		if (googleId != null) {
			setGoogleId(googleId);
		}

		String userEmail = (String)attributes.get("userEmail");

		if (userEmail != null) {
			setUserEmail(userEmail);
		}

		String userPicture = (String)attributes.get("userPicture");

		if (userPicture != null) {
			setUserPicture(userPicture);
		}

		String accessToken = (String)attributes.get("accessToken");

		if (accessToken != null) {
			setAccessToken(accessToken);
		}

		String refreshToken = (String)attributes.get("refreshToken");

		if (refreshToken != null) {
			setRefreshToken(refreshToken);
		}

		Long expires = (Long)attributes.get("expires");

		if (expires != null) {
			setExpires(expires);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask = -1L;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getGoogleId() {
		if (_googleId == null) {
			return StringPool.BLANK;
		}
		else {
			return _googleId;
		}
	}

	public void setGoogleId(String googleId) {
		_columnBitmask |= GOOGLEID_COLUMN_BITMASK;

		if (_originalGoogleId == null) {
			_originalGoogleId = _googleId;
		}

		_googleId = googleId;
	}

	public String getOriginalGoogleId() {
		return GetterUtil.getString(_originalGoogleId);
	}

	public String getUserEmail() {
		if (_userEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _userEmail;
		}
	}

	public void setUserEmail(String userEmail) {
		_columnBitmask |= USEREMAIL_COLUMN_BITMASK;

		if (_originalUserEmail == null) {
			_originalUserEmail = _userEmail;
		}

		_userEmail = userEmail;
	}

	public String getOriginalUserEmail() {
		return GetterUtil.getString(_originalUserEmail);
	}

	public String getUserPicture() {
		if (_userPicture == null) {
			return StringPool.BLANK;
		}
		else {
			return _userPicture;
		}
	}

	public void setUserPicture(String userPicture) {
		_userPicture = userPicture;
	}

	public String getAccessToken() {
		if (_accessToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessToken;
		}
	}

	public void setAccessToken(String accessToken) {
		_accessToken = accessToken;
	}

	public String getRefreshToken() {
		if (_refreshToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _refreshToken;
		}
	}

	public void setRefreshToken(String refreshToken) {
		_refreshToken = refreshToken;
	}

	public long getExpires() {
		return _expires;
	}

	public void setExpires(long expires) {
		_expires = expires;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PortletCredential.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortletCredential toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PortletCredential)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PortletCredentialImpl portletCredentialImpl = new PortletCredentialImpl();

		portletCredentialImpl.setId(getId());
		portletCredentialImpl.setCompanyId(getCompanyId());
		portletCredentialImpl.setUserId(getUserId());
		portletCredentialImpl.setUserName(getUserName());
		portletCredentialImpl.setCreateDate(getCreateDate());
		portletCredentialImpl.setModifiedDate(getModifiedDate());
		portletCredentialImpl.setGoogleId(getGoogleId());
		portletCredentialImpl.setUserEmail(getUserEmail());
		portletCredentialImpl.setUserPicture(getUserPicture());
		portletCredentialImpl.setAccessToken(getAccessToken());
		portletCredentialImpl.setRefreshToken(getRefreshToken());
		portletCredentialImpl.setExpires(getExpires());

		portletCredentialImpl.resetOriginalValues();

		return portletCredentialImpl;
	}

	public int compareTo(PortletCredential portletCredential) {
		int value = 0;

		if (getUserId() < portletCredential.getUserId()) {
			value = -1;
		}
		else if (getUserId() > portletCredential.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PortletCredential portletCredential = null;

		try {
			portletCredential = (PortletCredential)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = portletCredential.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortletCredentialModelImpl portletCredentialModelImpl = this;

		portletCredentialModelImpl._originalCompanyId = portletCredentialModelImpl._companyId;

		portletCredentialModelImpl._setOriginalCompanyId = false;

		portletCredentialModelImpl._originalUserId = portletCredentialModelImpl._userId;

		portletCredentialModelImpl._setOriginalUserId = false;

		portletCredentialModelImpl._originalGoogleId = portletCredentialModelImpl._googleId;

		portletCredentialModelImpl._originalUserEmail = portletCredentialModelImpl._userEmail;

		portletCredentialModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortletCredential> toCacheModel() {
		PortletCredentialCacheModel portletCredentialCacheModel = new PortletCredentialCacheModel();

		portletCredentialCacheModel.id = getId();

		portletCredentialCacheModel.companyId = getCompanyId();

		portletCredentialCacheModel.userId = getUserId();

		portletCredentialCacheModel.userName = getUserName();

		String userName = portletCredentialCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			portletCredentialCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			portletCredentialCacheModel.createDate = createDate.getTime();
		}
		else {
			portletCredentialCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			portletCredentialCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			portletCredentialCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		portletCredentialCacheModel.googleId = getGoogleId();

		String googleId = portletCredentialCacheModel.googleId;

		if ((googleId != null) && (googleId.length() == 0)) {
			portletCredentialCacheModel.googleId = null;
		}

		portletCredentialCacheModel.userEmail = getUserEmail();

		String userEmail = portletCredentialCacheModel.userEmail;

		if ((userEmail != null) && (userEmail.length() == 0)) {
			portletCredentialCacheModel.userEmail = null;
		}

		portletCredentialCacheModel.userPicture = getUserPicture();

		String userPicture = portletCredentialCacheModel.userPicture;

		if ((userPicture != null) && (userPicture.length() == 0)) {
			portletCredentialCacheModel.userPicture = null;
		}

		portletCredentialCacheModel.accessToken = getAccessToken();

		String accessToken = portletCredentialCacheModel.accessToken;

		if ((accessToken != null) && (accessToken.length() == 0)) {
			portletCredentialCacheModel.accessToken = null;
		}

		portletCredentialCacheModel.refreshToken = getRefreshToken();

		String refreshToken = portletCredentialCacheModel.refreshToken;

		if ((refreshToken != null) && (refreshToken.length() == 0)) {
			portletCredentialCacheModel.refreshToken = null;
		}

		portletCredentialCacheModel.expires = getExpires();

		return portletCredentialCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", googleId=");
		sb.append(getGoogleId());
		sb.append(", userEmail=");
		sb.append(getUserEmail());
		sb.append(", userPicture=");
		sb.append(getUserPicture());
		sb.append(", accessToken=");
		sb.append(getAccessToken());
		sb.append(", refreshToken=");
		sb.append(getRefreshToken());
		sb.append(", expires=");
		sb.append(getExpires());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.drewblessing.googletasks.model.PortletCredential");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>googleId</column-name><column-value><![CDATA[");
		sb.append(getGoogleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userEmail</column-name><column-value><![CDATA[");
		sb.append(getUserEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userPicture</column-name><column-value><![CDATA[");
		sb.append(getUserPicture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessToken</column-name><column-value><![CDATA[");
		sb.append(getAccessToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refreshToken</column-name><column-value><![CDATA[");
		sb.append(getRefreshToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expires</column-name><column-value><![CDATA[");
		sb.append(getExpires());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortletCredential.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PortletCredential.class
		};
	private long _id;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _googleId;
	private String _originalGoogleId;
	private String _userEmail;
	private String _originalUserEmail;
	private String _userPicture;
	private String _accessToken;
	private String _refreshToken;
	private long _expires;
	private long _columnBitmask;
	private PortletCredential _escapedModelProxy;
}